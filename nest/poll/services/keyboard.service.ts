import {Inject, Injectable} from "@nestjs/common";
import {Context, Markup, Telegraf} from "telegraf";
import {ChatService} from "./chat.service";
import {PollService} from "./poll.service";
import {Ctx, InjectBot} from "nestjs-telegraf";
import {SceneContext} from "telegraf/typings/scenes";

@Injectable()
export class KeyboardService {

    constructor(@InjectBot() private readonly bot: Telegraf<Context>,
                @Inject(ChatService) private readonly chatService: ChatService,
                @Inject(PollService) private readonly pollService: PollService) {}

    async showChatKeyboard(@Ctx() context: Context, id: number){
        const chatList = await this.chatService.getChatList(id);
        let buttons = chatList.map(el =>
            Markup.button.callback(el.title, `showchats:${JSON.stringify({chatId: el.chatId})}`));

        if(buttons.length === 0)
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã. " +
                "–í—ã —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –æ–±–ª–∞–¥–∞—Ç—å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."

        await context.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç',
            Markup.inlineKeyboard(buttons, {
                columns: 4
            })
        );
    }

    async showPollKeyboard(@Ctx() context: SceneContext, chatId: number){
        const polls = await this.pollService.getPollList(chatId);

        let buttons = polls.map(el =>
            Markup.button.callback(el.command, `showpoll:${JSON.stringify({id: el._id})}`));

        if(buttons.length === 0)
            return "–î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newpoll, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å.";

        await context.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å',
            Markup.inlineKeyboard(buttons, {
                columns: 3
            })
        );
    }

    async showPollSettingsKeyboard(@Ctx() context: Context) {
        // TODO Enum
        await context.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", Markup.inlineKeyboard([
                Markup.button.callback("üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å", `polloption:pinPool`),
                Markup.button.callback("üóì –î–æ–ø. —Ç–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞", 'polloption:addTimeToTitle'),
                Markup.button.callback("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 'polloption:save'),
                Markup.button.callback("–û—Ç–º–µ–Ω–∞", 'polloption:cancel'),
            ], {
                columns:2
            }));
    }

    async hideKeyboard(@Ctx() context: Context) {
        await context.editMessageReplyMarkup({ reply_markup: { remove_keyboard: true } } as any);
    }
}
